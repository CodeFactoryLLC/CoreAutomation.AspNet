// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CoreAutomation.AspNet.Commands.ExplorerCommands.SourceCode.Template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using CodeFactory;
    using CodeFactory.DotNet;
    using CodeFactory.DotNet.CSharp;
    using CodeFactory.VisualStudio;
    using CoreAutomation.AspNet.Commands.ExplorerCommands.SourceCode.Template;
    using CoreAutomation.AspNet.Automation.Logic;
    using CodeFactory.Formatting.CSharp;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AddMemberMethod : AddMemberMethodBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\n");
            
            #line 15 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
    //Loading the method data from the supplied model data object. 
            
            #line default
            #line hidden
            this.Write("    \r\n");
            
            #line 16 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
    AddMemberData templateData = ModelData as AddMemberData;
            
            #line default
            #line hidden
            
            #line 17 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
    if (templateData == null) return null; 
            
            #line default
            #line hidden
            
            #line 18 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
    CsMethod methodData = templateData.MethodModel;
            
            #line default
            #line hidden
            
            #line 19 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
    if(methodData == null) return null; 
            
            #line default
            #line hidden
            
            #line 20 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
    if(!methodData.IsLoaded) return null; 
            
            #line default
            #line hidden
            
            #line 21 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
    NamespaceManager manager = templateData.Manager; 
            
            #line default
            #line hidden
            
            #line 22 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
    if (manager == null) return null;
            
            #line default
            #line hidden
            
            #line 23 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Environment.NewLine));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 24 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
    if(methodData.HasDocumentation)
            
            #line default
            #line hidden
            
            #line 25 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
    {
            
            #line default
            #line hidden
            
            #line 26 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
      foreach(var formattedDocLine in methodData.CSharpFormatXmlDocumentationEnumerator())
            
            #line default
            #line hidden
            
            #line 27 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
      {
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 28 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(formattedDocLine));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 29 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
      }
            
            #line default
            #line hidden
            
            #line 30 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
    }
            
            #line default
            #line hidden
            
            #line 31 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
  if(methodData.HasAttributes)
            
            #line default
            #line hidden
            
            #line 32 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
  {
            
            #line default
            #line hidden
            
            #line 33 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
      var attributes = methodData.Attributes.CSharpFormatAttributeDeclarationEnumerator(manager);
        foreach(var attributeData in attributes)
            
            #line default
            #line hidden
            
            #line 35 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
      {
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 36 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attributeData));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 37 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
      }
            
            #line default
            #line hidden
            
            #line 38 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
    }
            
            #line default
            #line hidden
            
            #line 39 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
  var formattedMethod = methodData.CSharpFormatStandardMethodSignature(manager);
            
            #line default
            #line hidden
            
            #line 40 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
  if(string.IsNullOrEmpty(formattedMethod)) return null;
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 41 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(formattedMethod));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            _logger.LogInformation(\"Entering\");\r\n\r\n");
            
            #line 45 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
  if(methodData.HasParameters)
            
            #line default
            #line hidden
            
            #line 46 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
  {
            
            #line default
            #line hidden
            
            #line 47 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
      foreach( ICsParameter paramData in methodData.Parameters)
            
            #line default
            #line hidden
            
            #line 48 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
      {
            
            #line default
            #line hidden
            
            #line 49 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
          if(paramData.HasDefaultValue) continue;
            
            #line default
            #line hidden
            
            #line 50 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
          if(paramData.ParameterType.WellKnownType == CsKnownLanguageType.String)
            
            #line default
            #line hidden
            
            #line 51 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
          {
            
            #line default
            #line hidden
            this.Write("            if (string.IsNullOrEmpty(");
            
            #line 52 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramData.Name));
            
            #line default
            #line hidden
            this.Write("))\r\n            {\r\n                _logger.LogError($\"The parameter {nameof(");
            
            #line 54 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramData.Name));
            
            #line default
            #line hidden
            this.Write(")} was not provided. Will raise an argument exception\");\r\n                _logger" +
                    ".LogInformation(\"Exiting\");\r\n                throw new ArgumentNullException($\"P" +
                    "arameter data was missing from the application logic.\");\r\n            }\r\n\r\n");
            
            #line 59 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
          }
            
            #line default
            #line hidden
            
            #line 60 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
          if(!paramData.ParameterType.IsValueType & !paramData.ParameterType.IsWellKnownType)
            
            #line default
            #line hidden
            
            #line 61 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
          {
            
            #line default
            #line hidden
            this.Write("            if (");
            
            #line 62 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramData.Name));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n            {\r\n                _logger.LogError($\"The parameter {nameo" +
                    "f(");
            
            #line 64 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramData.Name));
            
            #line default
            #line hidden
            this.Write(")} was not provided. Will raise an argument exception\");\r\n                _logger" +
                    ".LogInformation(\"Exiting\");\r\n                throw new ArgumentNullException($\"P" +
                    "arameter data was missing from the application logic.\");\r\n            }\r\n\r\n");
            
            #line 69 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
          }
            
            #line default
            #line hidden
            
            #line 70 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
       }
            
            #line default
            #line hidden
            
            #line 71 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
   }
            
            #line default
            #line hidden
            this.Write(@"            try
            {
                //TODO: add execution logic here
            }
            catch (ArgumentNullException)
            {
                //Throwing the managed exception. Override this logic if you have logic in this method to handle managed errors.
                _logger.LogInformation(""Exiting"");
                throw;
            }
            catch (Exception unhandledException)
            {
                _logger.LogError(unhandledException, ""An unhandled exception occured, see the exception for details. Will throw a UnhandledLogicException"");
                _logger.LogInformation(""Exiting"");
                throw new Exception(""An unhandled error occured, check the logs for details."");
            }

            _logger.LogInformation(""Exiting"");
            throw new NotImplementedException();

");
            
            #line 92 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
 if(!methodData.IsVoid)
            
            #line default
            #line hidden
            
            #line 93 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
 {
            
            #line default
            #line hidden
            this.Write(" \r\n            //TODO: add return logic here\r\n");
            
            #line 95 "C:\github\CodeFactory\src\CommandProjects\CoreAutomation.AspNet\CoreAutomation.AspNet.Commands\ExplorerCommands\SourceCode\Template\AddMemberMethod.tt"
 }
            
            #line default
            #line hidden
            this.Write("        }");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class AddMemberMethodBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
